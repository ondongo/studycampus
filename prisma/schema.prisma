// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

/**
 * datasource db {
 * provider = "postgresql"
 * url      = env("DATABASE_URL")
 * }
 */

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Etudiant {
  id              String      @id @default(cuid())
  fname           String
  lname           String
  email           String      @unique
  codeCountry     String
  phone           String
  school          String
  yearCompletion  String
  qualification   String
  additionalInfo  String?
  birthDate       DateTime
  zipUrl          String
  profilePicture  String?     
  createdAt       DateTime    @default(now())
  typeStudent     TypeStudent
  isSeen          Boolean     @default(false)
  isContacted     Boolean     @default(false)
  source          Source

  @@map("etudiants")
}


enum TypeStudent {
  NOUVEAU_BACHELIER         
  PAS_ENCORE_BACHELIER       
  LICENCE                  
  DIPLOME_SUPERIEUR          // A un diplôme d'études supérieures
}

enum Source {
  BOURSE
  CAMPUS_FRANCE
}


model Evenement {
  id          String   @id @default(cuid())
  title       String
  description String
  dateDebut   DateTime
  dateFin     DateTime
  etat        Boolean   @default(true)
  zipUrl      String?
  createdAt   DateTime  @default(now())

  @@map("evenements")
}

model QuestionReponse {
  id          String      @id @default(cuid())
  title       String
  description String
  type        QAType
  createdAt   DateTime    @default(now())

  @@map("questions_reponses")
}

enum QAType {
  PARENT
  ETUDIANT
}

model Annonce {
  id          String   @id @default(cuid())
  title       String
  description String
  etat        Boolean  @default(true)
  zipUrl      String?
  createdAt   DateTime @default(now())

  @@map("annonces")
}


enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)

  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
